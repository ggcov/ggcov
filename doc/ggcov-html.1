.\"
.\" ggcov - A GTK frontend for exploring gcov coverage data
.\" Copyright (c) 2015-2020 Greg Banks <gnb@fastmail.fm>
.\" 
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\" 
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
.\"
.TH GGCOV-HTML "1" "July 2020" "GGCOV" "Greg Banks"
.SH NAME
ggcov\-html \- generate static HTML coverage report
.SH SYNOPSIS
\fBggcov\-html\fP [[\fB\-r\fP] \fIdirectory\fP|\fIfile\fP] ...
.SH DESCRIPTION
.PP
\fBGgcov\-html\fP generates a static HTML coverage report as
files in a directory, which can be directly viewed in a web
browser, no web server needed.
.PP
Test coverage data is produced by C and C++ programs compiled
with \fIgcc \-\-coverage\fP.  So \fBggcov\-html\fP is basically a
replacement for the \fBgcov\fP program that comes with \fBgcc\fP,
and is equivalent in purpose to \fBlcov\fP.
.PP
Arguments are used to specify how to find coverage data files.
The arguments can combinations of:
.IP \fIdirectory\fP
The directory is scanned for source files, which are handled as if they
had been specified on the commandline (except that missing coverage
data files are silently ignored).  If the \fB\-r\fP flag is in effect,
sub\-directories are scanned recursively.  Multiple directories can
be specified and are scanned in the order given.
.IP \fIexecutable\fP
The executable file is scanned for debugging records which contain
source file names, and each source file which exists is handled as if
it had been specified on the command line (except that missing coverage
data files are silently ignored).  Any shared libraries on which the
executable depends are also scanned.  Multiple executables can
be specified and are scanned in the order given.  This feature is
only available on some platforms (for example, x86\-64\-linux and i386\-linux).
.IP \fIsource-file\fP
Is any regular file ending in one of the file extensions \fI.c\fP,
\fI.cc\fP, \fI.cxx\fP, \fI.cpp\fP, \fI.C\fP or \fI.c++\fP.  Source files are
matched to their corresponding coverage data files (\fI.gcno\fP and
\fI.gcda\fP files) and object files by searching for a file of the same
basename and the appropriate extension first in the same directory
as the source file and then in all the directories specified on the
command line (in the order they were specified).
.SH OPTIONS
.TP
\fB\-O\fP \fIdir\fP, \fB\-\-output\-directory\fP=\fIdir\fP
Generate output into directory \fIdir\fP instead of the
default \fBhtml/\fP.
.TP
\fB\-t\fP \fIdir\fP, \fB\-\-template\-directory\fP=\fIdir\fP
Use HTML templates from the directory \fIdir\fP instead of the
built-in default.  This allows replacing the styling of the
HTML report with custom HTML.  The directory needs to contain
at least the following files in \fBmustache\fP template syntax.
.IP
\(bu \fIindex.html\fP
is the first page seen by users and contains an overall coverage summary.
.IP
\(bu \fItree.html\fP
shows a directory tree of source files with their coverage.
.IP
\(bu \fIsource.html\fP
shows the annotated source for a single source file.
.IP
\(bu \fIfunctions.html\fP
shows a list of all functions in the project with their coverage.
.IP
\(bu \fIstatic.files\fP
is a list of filenames in the template directory which are to be copied
directly to the output directory without template expansion.  Typically
this would include CSS files, logo images etc.

.TP
\fB\-o\fP \fIdir\fP, \fB\-\-object\-directory\fP=\fIdir\fP
Add the directory \fIdir\fP to the search path for object
files and coverage data files.
.TP
\fB-p\fP \fIdir\fP, \fB\-\-gcda\-prefix\fP=\fIdir\fP
Look for runtime coverage data files (\fI.gcda\fP files) underneath the
directory \fIdir\fP instead of next to the corresponding \fI.c\fP files.
See the example in the \fBggcov-run\fP(1) manpage.
.TP
\fB\-r\fP, \fB\-\-recursive\fP
When a directory is specified on the command line, search for
coverage data files recursively in all child directories.
.TP
\fB\-X\fP \fIsymbols\fP, \fB\-\-suppress\-ifdef=\fP\fIsymbols\fP
Suppress code inside C pre-processor directives which depend on
any of the given \fIsymbols\fP.  Suppressed code is not included
in statistics or summaries.  One or
more symbols may be given, separated by commas or whitespace.
\fBGgcov\-html\fP
understands the following subset of the C pre-processor command set:
.IP
\(bu \fI#if SYMBOL\fP
.br
\(bu \fI#if defined(SYMBOL)\fP
.br
\(bu \fI#ifdef SYMBOL\fP
.br
\(bu \fI#ifndef SYMBOL\fP
.br
\(bu \fI#else\fP
.br
\(bu \fI#endif\fP
.br
.IP
For example, \fB-X DEBUG\fP will suppress the \fIfprintf()\fP call in this code:
.IP
.nf
unsigned int
my_function(unsigned int x)
{
    x += 42;
#ifdef DEBUG
    fprintf(stderr, "my_function: x=%u\\n", x);
#endif
    return x;
}
.fi
.IP
This option is useful for suppressing test infrastructure code, debugging
code, or other code which is compiled into the coverage test executable
but whose coverage is not significant.

.TP
\fB\-Y\fP \fIwords\fP, \fB\-\-suppress\-comment=\fP\fIwords\fP
Suppress code on lines which also contain a single-line comment
comprising only one of the given \fIwords\fP.  Suppressed code is
not included in statistics or summaries.  One or more symbols may be
given, separated by commas or whitespace.  For example,
specifying \fB-Y IGNOREME\fP will suppress the \fIassert()\fP in this code:
.IP
.nf
unsigned int
my_function(unsigned int x)
{
    x += 42;
    assert(x >= 42);   /* IGNOREME */
    return x;
}
.fi
.IP
Note, \fBggcov\-html\fP will automatically suppress asserts on
platforms which support the calltree feature, so this example is moot.
.IP
This option is useful for suppressing test infrastructure code, debugging
code, or other code which is compiled into the coverage test executable
but whose coverage is not significant.

.TP
\fB\-Z\fP \fIstartword,endword,...\fP \fB\-\-suppress\-comment-between=\fP\fIstartword,endword,...\fP
Suppress code on lines between those containing a single-line comment
comprising only \fIstartword\fP and the next single-line comment comprising
only \fIendword\fP.  Suppressed code is not included in statistics or summaries.
Two or more symbols may be given, in pairs, separated by commas or
whitespace.  For example, \fB-Z STARTIGNORE,ENDIGNORE\fP
will suppress the entire function in this code:
.IP
.nf
/* STARTIGNORE */
unsigned int
my_function(unsigned int x)
{
    x += 42;
    return x;
}
// ENDIGNORE
.fi
.IP
This option is useful for suppressing test infrastructure code, debugging
code, or other code which is compiled into the coverage test executable
but whose coverage is not significant.

.TP
\fB\-\-suppress\-call=\fP\fIfunction,...\fP
Suppress code (blocks and arcs) which calls the given \fIfunction\fP.
Suppressed code is not included in statistics or summaries.
One or more functions may be given, separated by commas or whitespace.
For C++, the mangled function name (as shown by the \fInm\fP utility)
must be given.  For example, \fB\-\-suppress\-call fatal\fP
will suppress the call to \fIfatal\fP in this code:
.IP
.nf
unsigned int
my_function(unsigned int x)
{
    if (x == 42)
        fatal();   /* this line is suppressed */
    return x;
}
.fi
.IP
This option is useful for suppressing test infrastructure code, debugging
code, or other code which is compiled into the coverage test executable
but whose coverage is not significant.

.TP
\fB\-\-suppress\-function=\fP\fIfunction,...\fP
Suppress the entire \fIfunction\fP.
Suppressed code is not included in statistics or summaries.
One or more functions may be given, separated by commas or whitespace.
For C++, the mangled function name (as shown by the \fInm\fP utility)
must be given.  For example, \fB\-\-suppress\-function fatal\fP
will suppress the entire \fIfatal\fP function in this code:
.IP
.nf
unsigned int        /* entire function is suppressed */
fatal(void)
{
    fprintf(stderr, "Internal error!\n");
    exit(1);
}
.fi
.IP
This option is useful for suppressing test infrastructure code, debugging
code, or other code which is compiled into the coverage test executable
but whose coverage is not significant.

.SH EXAMPLES
.PP
Generate a static HTML coverage report for all the available source
in the executable \fBa.out\fP (on some platforms only), and
install as test \fBfoo\fP in the default tests location.
.IP
.B ggcov\-html a.out
.br
.PP
Generate a static HTML coverage report for all the C source in the current directory.
.IP
.B ggcov\-html *.c
.PP
Generate a static HTML coverage report for all the C source in one directory where the
object files and test coverage data files are in different directories:
.IP
.B ggcov\-html /foo/obj/ /foo/cov\-data/ /foo/src/
.SH CAVEATS
.PP
\fBGgcov\-html\fP runs the Ruby program \fBmustache\fP to do template expansion.
.SH AUTHOR
Written by Greg Banks
.IR <gnb@fastmail.fm> .
.SH COPYRIGHT
ggcov is Copyright \(co 2001\-2020 Greg Banks \fI<gnb@fastmail.fm>\fP.
.br
This is free software; see the COPYING file for copying conditions.  There
is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.SH SEE ALSO
\fIhttps://mustache.github.io/mustache.5.html\fP
