#!/bin/sh
#
# $Id: cvs2changelog,v 1.5.2.1 2003-08-03 09:55:18 gnb Exp $
#
# Shell script to build a change log for a new release
# from CVS logs. The change log will still need some
# manual editing to re-express changes for users, etc.
#

REV1=
REV2=
PACKAGE=`sed -n -e 's|^AM_INIT_AUTOMAKE(\([^,]\+\),\([^)]\+\))|\1|p' < configure.in`
DRYRUN=no
NREVS=0
ME="Greg Banks"
EMAIL="gnb@alphalink.com.au"
#FILES="Makefile.in Makefile configure.in"
DATE_FORMAT="%a %b %_d %H:%M:%S %Y"
CHECKFILE="configure.in"
IGNOREDIRS="www doc po"
LOG=ChangeLog
OLDLOG=ChangeLog.$$

canon_tag ()
{
    # Usage: canon_tag rev
    echo "${PACKAGE}_$1" | tr a-z. A-Z_
}

get_last_rev_tag ()
{
    TAGPREFIX=`canon_tag ""`
    cvs log -h $CHECKFILE |\
    	awk '/^	'$TAGPREFIX'[0-9_]*:/{print substr($1,1,length($1)-1); exit}'
	
}

get_rev_date ()
{
    # Usage: get_rev_data rev
    local tag
    local cvsdate
    
    tag=`canon_tag $1`
    cvsdate=`cvs log $CHECKFILE |\
    	awk '
/^symbolic names:/ {
    state = 1;
}
/^----------------------------$/ {
    state = 2;
}
/^[ 	]*'$tag':/ {
    if (state == 1)
    	frev = $2;
}
/^revision / {
    if ($2 == frev)
    	state = 4;
}
/^date:/ {
    if (state == 4)
    {
    	printf "%s %s GMT\n", gensub("/", "-", "g", $2), gensub(";", "", "g", $3);
    	exit;
    }
}
'`
    date +"$DATE_FORMAT" -d "$cvsdate"
}

usage ()
{
    [ -z "$*" ] || echo "cvs2changelog: $*"
    echo "Usage: cvs2changelog [--package pkg] [--dryrun] [rev1 [rev2]]"
    exit 0
}

while [ $# -gt 0 ]; do
    case "$1" in
    --package=*) PACKAGE=`echo "$1"|sed -e 's|^[^=]*=||g'` ;;
    --package) PACKAGE="$2" ; shift ;;
    --dryrun) DRYRUN=yes ;;
    --help) usage ;;
    -*) usage "bad option \"$1\"" ;;
    [0-9]*.[0-9]*.[0-9]*|[0-9]*.[0-9]*)
    	case "$NREVS" in
	0) REV1="$1" ;;
	1) REV2="$1" ;;
	*) usage "too many revisions at \"$1\"" ;;
	esac
	NREVS=`expr $NREVS + 1`
	;;
    *) usage "unexpected argument at \"$1\"" ;;
    esac
    shift
done

test -z "$PACKAGE" && usage "no package specified"

if [ -z "$REV1" ]; then
    # calculate previous tagged revision by getting
    # most recent tag of the correct format
    TAG1=`get_last_rev_tag`
else
    TAG1=`canon_tag "$REV1"`
fi

if [ -z "$REV2" ]; then
    # Use the magic tag `HEAD' which indicates the
    # most recent revision on a per-file basis
    TAG2="HEAD"
    REV2="latest revision"
    DATE=`date +"$DATE_FORMAT"`
    RELEASE=
else    
    TAG2=`canon_tag "$REV2"`
    DATE=`get_rev_date $REV2`
    RELEASE="$REV2"
fi

# echo "PACKAGE=$PACKAGE"
# echo "REV1=$REV1"
# echo "TAG1=$TAG1"
# echo "REV2=$REV2"
# echo "TAG2=$TAG2"
# echo "DRYRUN=$DRYRUN"
# exit 1

(
    echo -n "Compiling changes from $PACKAGE tags $TAG1 to $TAG2"
    test "$DRYRUN" = no && echo -n " into $LOG"
    echo ""
) 1>&2

# Extract change messages from multiple-file revision
# history.  If the log contains a symbolic name matching
# $TAG1, we drop the corresponding message because "cvs log"
# emits one revision too many in that case.  Otherwise,
# the file was created since $TAG1 and we use all messages.
#
# state:
# 0 = reading log header
# 1 = reading log lines
# 2 = reading symbolic names
extract ()
{
    awk -v TAG1=$TAG1 -v TAG2=$TAG2 '
BEGIN {
    state = 0;
    inattic = 0;
    nlines = 0;
    lines[0] = "";
    tag1rev = "";
    tag2rev = "";
    rev = "";
}
function same_branch(r1, r2,     a1, a2, n1, n2, i) {
    n1 = split(r1 ,a1, ".");
    n2 = split(r2, a2, ".");
    if (n1 != n2) return 0;
    for (i = 1 ; i <= (n1-2) ; i++) {
    	if (a1[i] != a2[i]) return 0;
    }
    return 1;
}
/^symbolic names:/ {
    state = 2;
    next;
}
/^keyword substitution:/ {
    state = 0;
}
/^date: / {
    if (state == 0) {
    	state = 1;
	nlines = 0;
	next;
    }
}
#/^Working / {
#    printf "******* %s\n", $0;
#}
/^RCS file: .*\/Attic\// {
    if (state == 0) {
    	inattic = 1;
	next;
    }
}
/^revision [0-9.]*$/ {
    if (state == 0) {
    	rev = $2;
#    	printf "183: rev=%s\n", rev;
    }
}
/^----------------/ {
    for (i = 0 ; i < nlines ; i++)
    	print lines[i];
    print "";
    state = 0;
}
/^================/ {
    for (i = 0 ; i < nlines ; i++)
    	print lines[i];
    print "";
    state = 0;
    inattic = 0;
    nlines = 0;
    tag1rev = "";
}
{
#    printf "197: state=%d inattic=%d rev=\"%s\" tag1rev=\"%s\"\n", state, inattic, rev, tag1rev;
    if (state == 1 && !inattic && rev != tag1rev && same_branch(rev, tag2rev)) {
    	printf "229: using rev=%s\n", rev >"/dev/stderr";
	lines[nlines++] = $0;
    } else if (state == 2 && $1 == TAG1":") {
    	tag1rev = $2;
#    	printf "205: tag1rev=\"%s\"\n", tag1rev;
    } else if (state == 2 && $1 == TAG2":") {
    	tag2rev = $2;
#    	printf "236: tag2rev=\"%s\"\n", tag2rev;
    }
}'
}

# Reformat the various strange ways I do checkin messages
# into something approaching GNU ChangeLog format.
canonicalise ()
{
    awk '
BEGIN {
    line = "";
    prefix = "\t* ";
    join = "\n\t";
#    prefix = "X";
#    join = "Y";
    mode = 0;
}
{
    if ($0 == "") {
    	if (line != "") print line;
    	line = "";
    } else if (match($0, "^[*x](  +|\t+)")) {
    	if (line != "") print line;
	mode = 1;
	line = prefix""substr($0, RLENGTH+1, length($0)-RLENGTH);
    } else if (match($0, "^(   +|\t+)")) {
    	if (mode != 1 && line != "") {
	    print line;
	    line = "";
	}
	mode = 1;
	line = line""join""substr($0, RLENGTH+1, length($0)-RLENGTH);
    } else {
    	if (mode != 2 && line != "") {
	    print line;
	    line = "";
	}
	mode = 2;
	if (line == "")
	    line = prefix""$0;
	else
	    line = line""join""$0;
    }
}
END {
    if (line != "") print line;
}'
}

# Remove duplicate log entries, usually due to the same
# log message (or point in a log message) being used for
# multiple files.
uniquify ()
{
    awk '
BEGIN {
    alldesc[""] = 0;
    desc = "";
}
/^$/ {
    next;
}
/^\t\* / {
    alldesc[desc]++;
    desc = $0;
    next;
}
/^\t/ {
    desc = desc"\n"$0
}
END {
    alldesc[desc]++;
    for (i in alldesc) {
    	if (i != "") print i;
    }
}'
}

getDirs ()
{
    IGNOREEXP=`echo "$IGNOREDIRS" | sed -e 's:[ 	][  ]*:|:g'`
    find . -type d -name CVS -print |\
    	sed -e '/^\.\/CVS$/d' -e 's/\/CVS$//' -e 's/^\.\///' |\
	egrep -v '^('$IGNOREEXP')$'
}

gatherChanges ()
{
    echo "$DATE  $ME <$EMAIL>"
    test -z "$RELEASE" || echo "	* Release $RELEASE"
    if [ -z "$FILES" ]; then
    	FILES="-l . "`getDirs`
    fi
    cvs log -r${TAG1}:${TAG2} $FILES 2>&1 | extract | canonicalise | uniquify
    echo ""
}


if [ "$DRYRUN" = yes ] ; then
    gatherChanges
else
    mv $LOG $OLDLOG && \
    gatherChanges > $LOG && \
    cat $OLDLOG >> $LOG && \
    rm $OLDLOG
fi
